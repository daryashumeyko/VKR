<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f8016535-0a52-411d-8c5d-f9bfbdcf123e" activeEnvironment="Default" name="VetSertification" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="afa22ae8-0cb4-4ec6-a2df-0dd6483b35d6" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://192.168.1.162:8089" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://192.168.57.162:8089</con:endpoint><con:endpoint>http://DSH-Flex:8089/</con:endpoint></con:endpoints><con:resource name="Auth" path="/auth" id="e97fb69a-b624-43d6-a701-5d243fb386cb"><con:settings/><con:parameters><con:parameter><con:name>email</con:name><con:value>darya@gmail.com</con:value><con:style>QUERY</con:style><con:default>darya@gmail.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>password</con:name><con:value>dsa123</con:value><con:style>QUERY</con:style><con:default>dsa123</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Auth 1" id="9f980c97-0128-403c-91b6-593e90642b54" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="c4038171-bb0f-409d-8bb0-e16ef629dfe7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.57.162:8089</con:endpoint><con:request/><con:originalUri>http://192.168.1.162/auth</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="password" value="dsa123"/>
  <con:entry key="email" value="darya@gmail.com"/>
</con:parameters><con:parameterOrder><con:entry>email</con:entry><con:entry>password</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="2802ff4a-d9d5-4cc8-ae33-8eeafdf1e86a" port="8089" path="/" host="DSH-Flex" name="VetSertificationMockService"><con:settings/><con:properties/><con:restMockAction name="/auth" method="POST" resourcePath="/auth" id="08025b71-d91f-45bb-939c-fc979a06a3cc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="cfd93322-a61b-4612-ad3c-7841e028d69a" httpResponseStatus="200"><con:settings/><con:responseContent/><con:header><con:name>family</con:name><con:value>Ильичев</con:value></con:header><con:header><con:name>surname</con:name><con:value>Ильич</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>